name: Build

on:
  workflow_call:
    inputs:
      # Common
      env:
        required: true
        type: string
      target:
        required: true
        type: string
      propertyPath:
        required: false
        type: string
        default: 'image.tag'
      buildArgs:
        required: false
        type: string
      # AWS
      awsImageName:
        required: false
        type: string
      awsValueFilePath:
        required: false
        type: string
      # NCP
      ncpRegistry:
        required: false
        type: string
      ncpImageName:
        required: false
        type: string
      ncpValueFilePath:
        required: false
        type: string

    secrets:
      AWS_ACCESS_KEY_ID:
        required: false
      AWS_SECRET_ACCESS_KEY:
        required: false
      NCP_ACCESS_KEY_ID:
        required: false
      NCP_SECRET_KEY:
        required: false
      MACHINE_TOKEN:
        required: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    # buildx 는 빠른 도커 백엔드입니다. 빌드 속도 개선을 위해 추가했습니다.
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v3

    # AWS 관련 작업
    - name: Configure AWS credentials
      if: ${{ inputs.awsImageName && inputs.awsValueFilePath }}
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2
      
    - name: Login to Amazon ECR
      if: ${{ inputs.awsImageName && inputs.awsValueFilePath }}
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    # NCP 관련 작업
    - name: Login to NCP Container Registry
      if: ${{ inputs.ncpRegistry && inputs.ncpImageName && inputs.ncpValueFilePath }}
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.ncpRegistry }}
        username: ${{ secrets.NCP_ACCESS_KEY_ID }}
        password: ${{ secrets.NCP_SECRET_KEY }}
        logout: false

    - name: Get current date time
      id: date
      run: echo "date=$(TZ='Asia/Seoul' date +'%Y-%m-%dT%H-%M-%S')" >> $GITHUB_OUTPUT

    - name: Set tags for AWS and NCP
      id: tags
      run: |
        TAGS=""
        if [ "${{ inputs.awsImageName }}" ] && [ "${{ inputs.awsValueFilePath }}" ]; then
          TAGS="${{ steps.login-ecr.outputs.registry }}/${{ inputs.awsImageName }}:${{ steps.date.outputs.date }}"
        fi
        if [ "${{ inputs.ncpRegistry }}" ] && [ "${{ inputs.ncpImageName }}" ] && [ "${{ inputs.ncpValueFilePath }}" ]; then
          if [ -n "$TAGS" ]; then
            TAGS="$TAGS,${{ inputs.ncpRegistry }}/${{ inputs.ncpImageName }}:${{ steps.date.outputs.date }}"
          else
            TAGS="${{ inputs.ncpRegistry }}/${{ inputs.ncpImageName }}:${{ steps.date.outputs.date }}"
          fi
        fi
        echo "tags=$TAGS" >> $GITHUB_OUTPUT

    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        push: true
        tags: ${{ steps.tags.outputs.tags }}
        build-args: ${{ inputs.buildArgs }}
        target: ${{ inputs.env }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Checkout jce-service-helm Repository
      uses: actions/checkout@v4
      with:
        repository: team-monolith-product/jce-service-helm
        path: jce-service-helm
        token: ${{ secrets.MACHINE_TOKEN }}
        ref: ${{ inputs.target }}

    - name: Set changes for AWS and NCP
      id: changes
      run: |
        CHANGES="{}"
        if [ "${{ inputs.awsValueFilePath }}" ]; then
          CHANGES=$(echo $CHANGES | jq ".\"${{ inputs.awsValueFilePath }}\".\"${{ inputs.propertyPath }}\" = \"${{ steps.date.outputs.date }}\"")
        fi
        if [ "${{ inputs.ncpValueFilePath }}" ]; then
          CHANGES=$(echo $CHANGES | jq ".\"${{ inputs.ncpValueFilePath }}\".\"${{ inputs.propertyPath }}\" = \"${{ steps.date.outputs.date }}\"")
        fi
        echo "changes=$CHANGES" >> $GITHUB_OUTPUT

    - name: Update Image Version in the related HelmChart value file
      uses: fjogeleit/yaml-update-action@master
      with:
        repository: team-monolith-product/jce-service-helm
        branch: ${{ inputs.target }}
        message: 'auto: Update Image Version to ${{ steps.date.outputs.date }}'
        token: ${{ secrets.MACHINE_TOKEN }}
        workDir: jce-service-helm
        changes: ${{ steps.changes.outputs.changes }}
