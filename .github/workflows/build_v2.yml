# v2.1 - 류호선
#   DOCKER_SECRETS 를 추가하였습니다. (하위 호환성 유지)
# v2.2 - 류호선
#   submodules: recursive 추가
# v2.3 - 류호선
#   - helmRepository 입력값을 추가하였습니다. (기본값: 'jce-service-helm')
#   - buildContext 입력값을 추가하였습니다. (기본값: '.')
name: Build

on:
  workflow_call:
    inputs:
      # gha
      runner:
        required: false
        type: string
        default: ubuntu-22.04
      # Common
      env:
        required: true
        type: string
      target:
        required: true
        type: string
      propertyPath:
        required: false
        type: string
        default: 'image.tag'
      buildArgs:
        required: false
        type: string
      # interface UpdateTarget = {
      #   "registry": string;
      #   "imageName": string;
      #   "valueFilePath": string[];
      # }
      # interface UpdateTargets = {
      #   "aws": UpdateTarget;
      #   "ncp": UpdateTarget;
      # }
      updateTargets:
        required: true
        type: string
      dockerTarget:
        required: false
        type: string
        description: Docker target. It uses the value of `env` if not specified.
      helmRepository:
        required: false
        type: string
        default: jce-service-helm
      buildContext:
        required: false
        type: string
        default: '.'

    secrets:
      AWS_ACCESS_KEY_ID:
        required: false
      AWS_SECRET_ACCESS_KEY:
        required: false
      NCP_ACCESS_KEY_ID:
        required: false
      NCP_SECRET_KEY:
        required: false
      MACHINE_TOKEN:
        required: true
      DOCKER_SECRETS:
        required: false

jobs:
  build:
    runs-on: ${{ inputs.runner }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive # 서브모듈 초기화
        fetch-depth: 0

    # buildx는 빠른 도커 백엔드입니다. 빌드 속도 개선을 위해 추가했습니다.
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v3

    - name: Get current date time
      id: date
      run: echo "date=$(TZ='Asia/Seoul' date +'%Y-%m-%dT%H-%M-%S')" >> $GITHUB_OUTPUT

    - name: Set up JSON file
      id: set-json
      run: echo '${{ inputs.updateTargets }}' > updateTargets.json

    - name: Check for platform presence
      id: check-platform
      run: |
        CONTAINS_AWS=$(jq -r 'has("aws")' updateTargets.json)
        CONTAINS_NCP=$(jq -r 'has("ncp")' updateTargets.json)
        
        echo "contains_aws=$CONTAINS_AWS" >> $GITHUB_OUTPUT
        echo "contains_ncp=$CONTAINS_NCP" >> $GITHUB_OUTPUT

    # AWS 관련 작업
    - name: Configure AWS credentials
      if: ${{ steps.check-platform.outputs.contains_aws == 'true' }}
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2

    - name: Login to Amazon ECR
      if: ${{ steps.check-platform.outputs.contains_aws == 'true' }}
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    # NCP 관련 작업
    - name: Login to NCP Container Registry
      if: ${{ steps.check-platform.outputs.contains_ncp == 'true' }}
      uses: docker/login-action@v3
      with:
        registry: ${{ fromJSON(inputs.updateTargets).ncp.registry }}
        username: ${{ secrets.NCP_ACCESS_KEY_ID }}
        password: ${{ secrets.NCP_SECRET_KEY }}
        logout: false

    - name: Set tags
      id: tags
      run: |
        TAGS=""
        for type in $(jq -r 'keys[]' updateTargets.json); do
          TARGET=$(jq -r ".$type" updateTargets.json)

          if [ "$type" == "aws" ]; then
            AWS_IMAGE_NAME=$(echo "$TARGET" | jq -r '.imageName')

            TAG="${{ steps.login-ecr.outputs.registry }}/${AWS_IMAGE_NAME}:${{ steps.date.outputs.date }}"

            if [ -n "$TAGS" ]; then
              TAGS="$TAGS,$TAG"
            else
              TAGS="$TAG"
            fi
          elif [ "$type" == "ncp" ]; then
            NCP_REGISTRY=$(echo "$TARGET" | jq -r '.registry')
            NCP_IMAGE_NAME=$(echo "$TARGET" | jq -r '.imageName')

            TAG="${NCP_REGISTRY}/${NCP_IMAGE_NAME}:${{ steps.date.outputs.date }}"

            if [ -n "$TAGS" ]; then
              TAGS="$TAGS,$TAG"
            else
              TAGS="$TAG"
            fi
          fi
        done
        echo "tags=$TAGS" >> $GITHUB_OUTPUT

    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        push: true
        tags: ${{ steps.tags.outputs.tags }}
        secrets: |
          ${{ secrets.DOCKER_SECRETS }}
        build-args: ${{ inputs.buildArgs }}
        context: ${{ inputs.buildContext }}
        target: ${{ inputs.dockerTarget || inputs.env }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Checkout to Helm Repository
      uses: actions/checkout@v4
      with:
        repository: team-monolith-product/${{ inputs.helmRepository }}
        path: ${{ inputs.helmRepository }}
        token: ${{ secrets.MACHINE_TOKEN }}
        ref: ${{ inputs.target }}

    - name: Set changes
      id: changes
      run: |
        CHANGES="{}"
        for type in $(jq -r 'keys[]' updateTargets.json); do
          TARGET=$(jq -r ".$type" updateTargets.json)
          for VALUE_FILE_PATH in $(echo "$TARGET" | jq -r '.valueFilePath[]'); do
            if [ "$VALUE_FILE_PATH" != "null" ]; then
              CHANGES=$(echo $CHANGES | jq -c ".\"$VALUE_FILE_PATH\".\"${{ inputs.propertyPath }}\" = \"${{ steps.date.outputs.date }}\"")
            fi
          done
        done
        echo "changes=$CHANGES" >> $GITHUB_OUTPUT

    - name: Update Image Version in the related HelmChart value file
      uses: fjogeleit/yaml-update-action@master
      with:
        repository: team-monolith-product/${{ inputs.helmRepository }}
        branch: ${{ inputs.target }}
        message: 'auto: Update Image Version to ${{ steps.date.outputs.date }}'
        token: ${{ secrets.MACHINE_TOKEN }}
        workDir: ${{ inputs.helmRepository }}
        changes: ${{ steps.changes.outputs.changes }}
